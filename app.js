const { App } = require("@slack/bolt");
const schedule = require("node-schedule");
const generateRandomReviewer = require("./utils/generateRandomReviewer.js");

const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  port: process.env.PORT || 3000,
});

const joinedAlgoMembers = [];

const member = {
  U04F2A0HT0Q: "Í≥µÏû¨ÌòÅ",
  U04F5QP3WE4: "Í∏∏ÏßÄÎ¨∏",
  U04EQSZ4MSS: "ÏÇ¨Í≥µÏùÄÌòú",
  U04EXF5FSTC: "ÏïàÌòïÏö∞",
  U04EGULQY5V: "Ïù¥ÏÑ∏ÏòÅ",
  U04EQSZ6GHL: "Ïù¥Ï†ïÏßÑ",
  U04EG0SPEBV: "ÏûÑÌòÑÏ†ï",
  U04EGUM5ZFH: "ÏµúÏÜ°Ïù¥",
  U04FM6DECP2: "ÌïúÏïÑÎ¶Ñ",
  U04ERNNE11S: "test1",
  U04FCUV0DCY: "test2",
};

async function sendMorningMessage() {
  try {
    joinedAlgoMembers.length = 0;

    const result = await app.client.chat.postMessage({
      token: process.env.SLACK_BOT_TOKEN,
      channel: process.env.MESSAGE_CHANNEL,
      text: "Good Morning",
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `Good Morning Vas Members!üåº\n Are you ready to become a Algo King?`,
          },
        },
        {
          type: "divider",
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "Click the *Join* Button!üî•",
          },
          accessory: {
            type: "button",
            text: {
              type: "plain_text",
              text: "Join",
            },
            value: "click_me_123",
            action_id: "button_click",
          },
        },
      ],
    });

    console.log(result);
  } catch (error) {
    console.error(error);
  }
}

async function sendReviewer() {
  try {
    console.log(joinedAlgoMembers, "what");
    const reviewer = generateRandomReviewer(joinedAlgoMembers);

    if (!reviewer) return;

    const result = await app.client.chat.postMessage({
      token: process.env.SLACK_BOT_TOKEN,
      channel: process.env.MESSAGE_CHANNEL,
      text: `‚≠êÔ∏èToday's Reviewer \n ${reviewer}`,
    });

    console.log(result);
  } catch (error) {
    console.error(error);
  }
}

let morningSheduleObj = null;
let reviewerSheduleObj = null;

const scheduleSet = () => {
  const morningMessageRule = new schedule.RecurrenceRule();
  const reviewerMatchRule = new schedule.RecurrenceRule();

  morningMessageRule.dayOfWeek = [0, 2, 4, 6];
  morningMessageRule.hour = 09;
  morningMessageRule.minute = 30;
  morningMessageRule.tz = "Asia/Seoul";

  reviewerMatchRule.dayOfWeek = [0, 2, 4, 6];
  reviewerMatchRule.hour = 10;
  reviewerMatchRule.minute = 30;
  reviewerMatchRule.tz = "Asia/Seoul";

  const firstJob = schedule.scheduleJob(morningMessageRule, () => {
    console.log("Ïä§ÏºÄÏ§Ñ Ïä§ÌÉÄÌä∏");
    sendMorningMessage();
  });

  const secondJob = schedule.scheduleJob(reviewerMatchRule, () => {
    console.log("Ïä§ÏºÄÏ§Ñ Ïä§ÌÉÄÌä∏");
    sendReviewer();
  });

  morningSheduleObj = firstJob;
  reviewerSheduleObj = secondJob;
};

const cancel = () => {
  if (morningSheduleObj !== null && reviewerSheduleObj !== null) {
    morningSheduleObj.cancel();
    reviewerSheduleObj.cancel();
  }
};

const setSchedueler = () => {
  cancel();
  scheduleSet();
};

setSchedueler();

app.action("button_click", async ({ body, ack, say }) => {
  try {
    const clickedMember = member[body.user.id];

    if (
      joinedAlgoMembers.find((joinedMember) => joinedMember === clickedMember)
    ) {
      await ack();
      return;
    } else {
      joinedAlgoMembers.push(clickedMember);

      await ack();
      await say(`<${joinedAlgoMembers.join()}> joined in today's Algo`);
    }
  } catch (err) {
    console.log(err);
  }
});

app.message("Î¨∏Ï†ú ÏóÖÎ°úÎìú ÏôÑÎ£å", async ({ message, say }) => {
  try {
    await say(
      `Today's algo upload complete.‚ú®
      \n\nPlease follow the process below.
      \n‚ö†Ô∏ègit pull algo *problems*`
    );
  } catch (error) {
    console.log("Î¨∏Ï†ú ÏóÖÎ°úÎìú ÏôÑÎ£å ÏóêÎü¨", error);
  }
});

app.message("Ï¥àÍ∏∞ ÏÑ§Ï†ï Î∞©Î≤ï", async ({ message, say }) => {
  try {
    console.log(message);
    await say(
      "1. `https://github.com/vaco-algo/vaco-algo-study` fork \n2. `$ git clone forkÌïú Î†àÌè¨` \n3. `$ git remote add algo https://github.com/vaco-algo/vaco-algo-study.git` ÏúºÎ°ú Î≥∏ Î†àÌè¨Î•º remoteÏóê Ï∂îÍ∞ÄÌïúÎã§. \n4. Î¨∏Ï†ú ÎÇ¥Î†§Î∞õÍ∏∞ : ‚≠êÔ∏è`$ git pull algo problems`‚≠êÔ∏è"
    );
  } catch (error) {
    console.log("Ï¥àÍ∏∞ ÏÑ§Ï†ï Î∞©Î≤ï ÏóêÎü¨", error);
  }
});

app.message("Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Î∞©Î≤ï", async ({ message, say }) => {
  try {
    console.log(message);
    await say("‚≠êÔ∏è`$ git pull algo problems`‚≠êÔ∏è");
  } catch (error) {
    console.log("Î¨∏Ï†ú ÏóêÎü¨", error);
  }
});

app.message("Ïä§ÏºÄÏ§Ñ ÌÖåÏä§Ìä∏", async ({ message, say }) => {
  await sendMorningMessage();
});

app.message("hey", async ({ message, say }) => {
  try {
    await say(
      "üîπpicker botÏùÄ Îß§Ï£º Ïùº, Ìôî, Î™©, ÌÜ†\n9Ïãú 30Î∂Ñ, 10Ïãú 30Î∂ÑÏóê Î©îÏÑ∏ÏßÄÎ•º Î≥¥ÎÉÖÎãàÎã§.\nüîπpicker botÏùò Î™ÖÎ†πÏñ¥ \n1. `Ï¥àÍ∏∞ ÏÑ§Ï†ï Î∞©Î≤ï`\n2. `Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Î∞©Î≤ï`\n3. `Î¨∏Ï†ú ÏóÖÎ°úÎìú ÏôÑÎ£å`\nÎ•º ÏûÖÎ†•ÌïòÎ©¥ Ïñ¥ÎîîÎì†ÏßÄ ÎÇòÌÉÄÎÇ©ÎãàÎã§.\n(Îã§Ïù¥Î†âÌä∏ Î©îÏãúÏßÄ Ï†úÏô∏, picker botÏùÑ Í∞Å Ï±ÑÎÑêÏóê Ï¥àÎåÄÌïòÏó¨Ïïº Ìï©ÎãàÎã§.)"
    );
  } catch (error) {
    console.log("hey", error);
  }
});

app.event("app_home_opened", async ({ event, say }) => {
  await say(
    "üîπpicker botÏùÄ Îß§Ï£º Ïùº, Ìôî, Î™©, ÌÜ†\n9Ïãú 30Î∂Ñ, 10Ïãú 30Î∂ÑÏóê Î©îÏÑ∏ÏßÄÎ•º Î≥¥ÎÉÖÎãàÎã§.\nüîπpicker botÏùò Î™ÖÎ†πÏñ¥ \n1. `Ï¥àÍ∏∞ ÏÑ§Ï†ï Î∞©Î≤ï`\n2. `Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Î∞©Î≤ï`\n3. `Î¨∏Ï†ú ÏóÖÎ°úÎìú ÏôÑÎ£å`\nÎ•º ÏûÖÎ†•ÌïòÎ©¥ Ïñ¥ÎîîÎì†ÏßÄ ÎÇòÌÉÄÎÇ©ÎãàÎã§.\n(Îã§Ïù¥Î†âÌä∏ Î©îÏãúÏßÄ Ï†úÏô∏, picker botÏùÑ Í∞Å Ï±ÑÎÑêÏóê Ï¥àÎåÄÌïòÏó¨Ïïº Ìï©ÎãàÎã§.)"
  );
});

app.error((error) => {
  console.error(error);
});

(async () => {
  await app.start();

  console.log("‚ö°Ô∏è Bolt app is running!");
})();
